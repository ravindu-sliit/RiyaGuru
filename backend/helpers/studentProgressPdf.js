import PDFDocument from "pdfkit";
import fs from "fs";
import path from "path";

export const generateStudentProgressPDF = async ({ student, courses, lessonsByCourse }) => {
  const reportsDir = path.join(process.cwd(), "uploads", "reports");
  if (!fs.existsSync(reportsDir)) fs.mkdirSync(reportsDir, { recursive: true });

  const fileName = `${student.studentId || student._id}_progress_${Date.now()}.pdf`;
  const filePath = path.join(reportsDir, fileName);

  const doc = new PDFDocument({ margin: 50, size: "A4", bufferPages: true });
  const stream = fs.createWriteStream(filePath);
  doc.pipe(stream);

  // Header
  doc.fontSize(20).font("Helvetica-Bold").fillColor("#F47C20").text("Student Progress Report", { align: "center" });
  doc.moveDown(0.5);
  doc.fontSize(10).fillColor("#555").text(`Generated: ${new Date().toLocaleString()}`, { align: "center" });
  doc.moveDown(1.2);

  // Student info + photo if available
  const leftX = 70;
  const imageX = doc.page.width - 150;
  doc.fontSize(12).fillColor("#222").font("Helvetica-Bold").text(student.full_name || student.fullName || "-", leftX, doc.y);
  doc.moveDown(0.2);
  doc.fontSize(10).font("Helvetica").fillColor("#333").text(`Student ID: ${student.studentId || "-"}`);
  doc.text(`Email: ${student.email || "-"}`);
  if (student.phone) doc.text(`Phone: ${student.phone}`);
  doc.moveDown(0.6);

  try {
    if (student.profilePicPath) {
      const imgPath = path.join(process.cwd(), "uploads", "studentProfPics", student.profilePicPath);
      if (fs.existsSync(imgPath)) {
        doc.image(imgPath, imageX, 120, { width: 80, height: 80, fit: [80, 80] });
      }
    }
  } catch (e) {
    // ignore image errors
    console.warn("Failed to attach profile pic to PDF", e?.message || e);
  }

  doc.moveDown(1);

  // Courses summary
  for (const course of courses) {
    doc.fontSize(13).font("Helvetica-Bold").fillColor("#0A1A2F").text(course.course_name);
    doc.moveDown(0.2);
    doc.fontSize(10).font("Helvetica").fillColor("#333").text(`Progress: ${course.progress_percent || 0}%  •  Completed Lessons: ${course.completed_lessons || 0} / ${course.total_lessons || "-"}`);
    if (course.certificateId) doc.text(`Certificate: ${course.certificateId}`);
    doc.moveDown(0.4);

    const lessons = lessonsByCourse[course.course_name] || [];
    if (lessons.length > 0) {
      doc.fontSize(11).font("Helvetica-Bold").text("Completed Lessons:");
      doc.moveDown(0.2);
      // table-like list
      for (const l of lessons) {
        const dateStr = l.date ? new Date(l.date).toLocaleString() : "-";
        const feedback = l.feedback ? ` - ${String(l.feedback).slice(0, 120)}` : "";
        doc.fontSize(10).font("Helvetica").text(`#${l.lesson_number} — ${dateStr} — Instructor: ${l.instructor_id || "-"}${feedback}`);
      }
      doc.moveDown(0.6);
    } else {
      doc.fontSize(10).font("Helvetica").fillColor("#666").text("No completed lessons recorded.");
      doc.moveDown(0.4);
    }

    // divider
    doc.moveTo(50, doc.y).lineTo(doc.page.width - 50, doc.y).strokeColor("#E5E7EB").stroke();
    doc.moveDown(0.6);
  }

  // Footer
  doc.moveDown(1);
  doc.fontSize(10).fillColor("#777").text("This report was generated by RiyaGuru.lk Driving School.", { align: "center" });

  doc.end();
  await new Promise((resolve) => stream.on("finish", resolve));

  return filePath;
};
